// Code generated for package lua by go-bindata DO NOT EDIT. (@generated)
// sources:
// cutoff.lua
package lua

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cutoffLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x56\x5d\x6f\xdb\x36\x17\xbe\xd7\xaf\x38\xaf\x7a\x63\xb5\x52\x2a\xa7\x4d\xdf\x22\x80\x0b\xb4\xb1\x57\x18\x6d\xd2\x2c\x76\xbf\x10\x18\x03\x2d\x1d\xdb\x44\x28\x52\xa0\xa8\xa4\xde\xb0\xfd\xf6\x81\xa4\x6c\x51\x96\xe4\x2d\xc3\xae\xe6\x0b\xdb\x10\x9f\x73\x78\xce\xf3\x9c\x0f\x45\x51\xe4\x45\x51\x04\xef\x91\xa3\x24\x0a\x53\x58\x6e\x61\x92\x65\xdb\x8f\x25\x19\x6c\x94\xca\x8b\xf3\xe7\xcf\xd7\x54\x6d\xca\xe5\x49\x22\xb2\xe7\xd5\x51\x60\x8c\x2e\x24\xee\x4c\x92\x25\x65\x0c\x95\x3a\x31\x07\x63\xa2\x70\x4e\x33\x3c\x87\xd3\xf8\x34\x8e\xe2\xd3\x28\x3e\x83\xd7\xe7\x67\xff\x07\x72\x92\x19\x88\xe7\x49\x4c\x69\x71\x22\x31\x67\x34\x21\x0a\x7f\x49\x44\x96\x11\x9e\x16\x83\xc0\x33\x3e\x3e\x2b\xca\xa8\xa2\x58\x78\x1e\x13\x09\x61\xb0\x2a\x79\xa2\xa8\xe0\x50\x30\x9a\xe0\x40\x2d\x59\x08\x2b\x2a\x0b\x15\x02\x23\xfa\xbb\x50\x98\x07\x1e\x00\x80\x35\x30\xb8\x14\x46\xf0\xdb\xef\x9e\x79\xbc\x12\x12\x28\x8c\xac\x15\x08\x09\x43\x6b\xaa\xff\x3e\x31\xfe\xb4\x0b\x73\x00\xa9\x30\x26\xfa\x63\xfd\xdc\x3e\xa9\xfc\x3d\x83\xe1\x02\x46\xa0\x96\xec\x96\x2e\x0c\x08\x79\x6a\x2f\x90\xa8\x4a\x59\x05\x98\x7a\xe6\xf1\x41\xec\x89\xc8\xf2\x52\xe1\x45\x29\x25\x72\x75\x8d\x92\x8a\xf4\x42\xf0\xa2\xcc\x72\x7d\x3e\x78\xa0\x3c\x15\x0f\x33\xfa\x2b\x06\x9e\x93\xca\x1d\x6e\x0b\x18\x55\x99\x7f\x98\x7c\x9f\x85\x70\x16\xc2\x19\x3c\x03\xd7\xa0\xc6\xdf\x13\x56\xa2\xb6\xb0\x2c\x27\x84\xb1\x81\x7f\xf9\x7e\x32\xf7\x43\x28\x79\x4e\x92\xbb\x81\x76\x19\x34\xe8\x2a\x33\x18\x41\x5c\x33\xc5\x53\xfc\x11\x5a\x57\x40\x39\xd0\x9c\x50\x59\x0c\xac\xeb\xc0\x25\xa8\xba\x53\x93\x22\x78\x99\x2d\x51\x5a\x54\xb0\x47\xd0\x15\xdc\xc3\x1f\x23\xe0\x94\x81\xda\x20\xdf\x1f\x18\x7e\xcd\xc5\xfa\xfb\x19\xdc\xef\x4f\x34\x7b\xee\xef\x8e\xdb\x32\xb3\xc4\x9a\xaa\x15\x58\x80\xda\x48\x51\xae\x37\xda\x2f\x64\x94\x97\x0a\xd9\x16\x12\xc3\x29\xa6\x90\x8a\xa4\xd0\xd1\x4b\xbc\x47\x59\x20\x28\x01\x2b\xba\x2e\x25\x82\x28\x15\x6c\xc4\x03\x30\xc1\xd7\xc6\xb8\x2c\x50\x42\xb1\x11\x25\x4b\x61\x89\xb0\x64\x22\xb9\xc3\xd4\x8b\xa2\xdb\xdb\x6e\x15\xdf\x69\xc4\xb8\x94\xc4\x48\x97\x8a\xe4\xe7\x52\x28\x12\xc2\x23\x44\x6c\x28\x68\x44\x8d\x86\xff\x31\x21\x2b\x33\xfd\xf8\xcd\x08\x76\x2c\xb5\xad\x1d\x91\x6b\x4a\x20\xb2\xe1\x37\x90\xbb\x92\x38\x52\x26\xb1\x2e\x92\xc5\xc2\x96\xc9\x87\xc9\x77\x18\x4f\x7e\x9a\x5e\x4d\xe7\xd3\x4f\x57\xb3\xaa\x27\xb5\xdc\x6e\x03\x62\x3a\x16\x09\x8c\x34\x7a\x76\x3b\x5c\x54\xa8\x25\x23\xc9\xdd\x47\x5a\xa8\x0f\xb8\xdd\x1d\x9e\xb6\x0e\xbf\xa0\x2c\xa8\xe0\x0e\xe6\xc5\xc2\xb9\x66\x4c\x28\xdb\x8e\x45\xe2\x74\xba\x03\x7d\xe9\x42\x2f\xab\x0a\xee\x45\x9f\x55\x49\xcd\x2e\x6e\xa6\xd7\x73\x98\x5e\x5d\x7f\x9e\xef\x52\x22\x4c\xff\x2a\x93\x49\x99\x21\x57\x17\xa2\xe4\xca\x95\xf3\xed\xcd\xfb\x2f\xb7\xc3\x45\x50\x19\x54\x6d\xb2\x83\xb7\x90\xa7\x7b\x24\xf2\xf4\xd3\xea\xab\xd1\x45\x4f\xf6\x99\x22\x59\xde\x82\xbf\xd8\xc3\x97\x6e\x6b\xb4\x70\x2f\xf7\x38\x47\xe9\x43\xd0\xd9\xc2\x6c\x82\x5c\x52\xae\x06\x7e\xa7\x5a\xe7\x3e\x9c\x9c\x74\x0b\x19\xd4\xa6\xdd\xac\x58\xdb\xee\x33\xc7\xf8\x80\x21\x6b\x75\xf0\xd0\x81\x1b\x9a\xc6\x64\xbb\xe7\xc8\x1a\xb4\x1e\xdb\x05\x1a\x3d\xfa\x63\xcc\xe6\x7a\xd2\x21\x51\xff\xfb\xa7\x4e\xe8\xaa\xad\xfc\x08\xe2\xba\x27\xdd\x2e\xaa\xca\xed\x8e\xe6\x50\x72\x46\x33\xaa\x57\x3e\x49\x12\x2c\x0a\xed\xa8\xaf\xe6\x1a\xfe\xa2\xa8\x6d\xeb\xdc\xe3\xef\x0f\xfd\xfa\x46\xd3\x34\x55\x9c\xa6\x09\x60\x43\x78\xca\x28\x5f\x7b\x51\xa4\x27\x8a\x3b\x12\xa7\x57\x17\x37\xef\xbe\xeb\xa1\xd8\xdb\x6e\x61\x4b\x36\x1d\xe4\x21\x0f\x26\xe4\x28\xaa\xa6\x51\x7d\xc1\xe4\xdb\xf5\xf4\x66\xf2\x17\x17\xbc\x7e\xf5\x32\x8e\xb5\xb4\xb0\xcf\xe2\xb2\xb9\x91\x0e\x12\x39\x96\x45\xef\x24\x78\x44\x22\x47\xb3\x38\x72\xc1\xab\x18\x9e\x36\xd6\x98\xc9\xe7\x20\xda\xc9\xb7\xe9\x6c\x3e\xf3\xc3\xc6\x8c\x34\xb1\x0c\x5b\x95\xe4\x13\x26\x91\xa4\x5b\x58\x32\x47\xe2\x1b\xcc\x08\xe5\x94\xaf\xf5\x5a\xb0\x61\x3b\x1a\xef\xd6\xae\x99\x25\x94\xaf\x9d\x71\xd2\xb9\x80\xbb\x2b\x31\x84\x61\x1c\xe8\xd0\x5b\x6e\xde\xb8\x15\x5a\x4d\xb9\x1f\x39\x95\x38\xd5\x57\xb4\xe0\x4f\xe1\x55\xec\xb5\x18\x9d\x4d\xe6\x93\x6f\x07\x1c\x84\x7b\x3f\x21\xf8\x4a\x28\xc2\x74\x7e\x80\x3f\x12\xc4\x14\x53\x3f\x68\x79\xd1\xc2\xbb\x4e\xea\x7d\x12\x34\xde\x2c\xfd\x8a\x3e\xbd\xd9\x6c\xc4\xb9\x3b\xf8\x9c\x39\xde\x5b\x56\xad\x49\xd9\x2e\x27\xcd\x56\x8f\xdf\x23\x75\x16\x45\xf0\x15\x61\x43\xee\x11\x08\x70\x7c\x38\xb6\xf9\xee\x70\xeb\xb0\x9e\xf4\xbc\x0d\xd7\x42\xff\xad\xf7\x65\x1b\x84\x75\x79\x48\xc1\x7c\x7a\x39\xf1\x9b\x10\x47\xeb\xce\xe5\x16\xd5\xfb\x48\x99\x95\xd9\x21\xfd\x11\x4e\x7b\x22\xb6\x6e\xfa\x54\xeb\xb3\xaa\x02\xef\x6d\xe5\x8e\x00\x76\xe9\xb5\xe3\xb6\x96\x6f\x8f\x04\xdf\xc5\x47\x3d\x03\xba\x83\x7f\x03\x3d\x0d\xd8\x9c\x24\xdd\x73\xa9\xbb\x8b\x1a\x2f\x11\xff\x46\x2b\x59\x16\x3b\x86\x6e\x8f\xc1\xc1\x2c\xb3\x6b\xe1\xd1\x5b\xa1\x91\xc6\x2e\x88\x83\xf7\x55\x7f\x3f\x17\xeb\x81\xc9\x60\x2d\x44\xea\x7b\x7f\x06\x00\x00\xff\xff\x98\x83\x07\x25\xa4\x0f\x00\x00")

func cutoffLuaBytes() ([]byte, error) {
	return bindataRead(
		_cutoffLua,
		"cutoff.lua",
	)
}

func cutoffLua() (*asset, error) {
	bytes, err := cutoffLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cutoff.lua", size: 4004, mode: os.FileMode(420), modTime: time.Unix(1615306643, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cutoff.lua": cutoffLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cutoff.lua": &bintree{cutoffLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
