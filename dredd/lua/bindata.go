// Code generated for package lua by go-bindata DO NOT EDIT. (@generated)
// sources:
// cutoff.lua
package lua

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cutoffLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x6d\x6f\xdb\xb6\x13\x7f\xef\x4f\x71\x7f\xf5\xc5\x5f\x4a\xa5\xd4\x49\x9b\x76\x08\xe6\x01\x9d\xe3\x15\x46\xdb\x34\x88\xdd\x27\x04\xc6\x40\x4b\xe7\x98\x30\x45\x0a\x24\x65\xc7\x1d\xb6\xcf\x3e\x90\xd4\xa3\x25\xa7\xdd\x30\xbf\xb0\x0d\xde\xef\xee\x78\xbf\x7b\xe0\x45\x51\x34\x88\xa2\x08\xde\x20\x47\x49\x34\x26\xb0\xdc\xc3\x24\x4d\xf7\xef\x72\xe2\xaf\xb5\xce\xd4\xe5\xb3\x67\xf7\x54\xaf\xf3\xe5\x69\x2c\xd2\x67\x85\x28\xb0\x4a\x63\x89\xa5\x4a\xbc\xa4\x8c\xa1\xd6\xa7\x56\x70\x45\x34\xce\x69\x8a\x97\x70\x3e\x3c\x1f\x46\xc3\xf3\x68\x78\x01\x3f\x5d\x5e\xbc\x02\x72\x9a\x5a\xc8\x60\x20\x31\xa1\xea\x54\x62\xc6\x68\x4c\x34\xfe\x1e\x8b\x34\x25\x3c\x51\x7e\x30\xb0\x36\x3e\x6a\xca\xa8\xa6\xa8\x06\x03\x26\x62\xc2\x60\x95\xf3\x58\x53\xc1\x41\x31\x1a\xa3\xaf\x97\x2c\x84\x15\x95\x4a\x87\xc0\x88\xf9\x56\x1a\xb3\x60\x00\x00\xe0\x14\x2c\x2e\x81\x11\xfc\xf1\xe7\xc0\x1e\xaf\x84\x04\x0a\x23\xa7\x05\x42\xc2\x99\x53\x35\x7f\x9f\x58\x7b\xc6\x84\x15\x40\x22\xac\x8a\xf9\x38\x3b\x77\x4f\x0a\x7b\x4f\xe1\x6c\x01\x23\xd0\x4b\x76\x47\x17\x16\x84\x3c\x71\x0e\x24\xea\x5c\x16\x17\x4c\x06\xf6\xf8\xe0\xee\xb1\x48\xb3\x5c\xe3\x38\x97\x12\xb9\xbe\x41\x49\x45\x32\x16\x5c\xe5\x69\x66\xe4\xfe\x8e\xf2\x44\xec\x66\xf4\x1b\x36\x23\xd9\xe0\x5e\xc1\xa8\x08\xfc\xed\xe4\xeb\x2c\x84\x8b\x10\x2e\xe0\x29\xf4\xe3\xb7\x84\xe5\x68\x34\x1c\xc9\x31\x61\xcc\xf7\xde\xbf\x99\xcc\xbd\x10\x72\x9e\x91\x78\xe3\x1b\x93\x41\x8b\xad\x3c\x85\x11\x0c\x6b\xa2\x78\x82\x0f\xa1\x33\x05\x94\x03\xcd\x08\x95\xca\x77\xa6\x83\x26\x3f\x85\x4f\xc3\x89\xe0\x79\xba\x44\xe9\x50\x41\x85\xa0\x2b\xd8\xc2\x5f\x23\xe0\x94\x81\x5e\x23\xaf\x04\x96\x5e\xeb\xd8\x7c\x3f\x85\x6d\x25\x31\xe4\x35\x7f\x4b\x6a\xf3\xd4\xf1\x6a\x4a\xe4\xed\xe4\x2b\x5c\x4d\x7e\x9b\x5e\x4f\xe7\xd3\x0f\xd7\xb3\x82\xeb\x5c\xa1\x6c\x12\x8b\xc9\x95\x88\x61\x64\xd0\xb3\xbb\xb3\x45\x81\x5a\x32\x12\x6f\xde\x51\xa5\xdf\xe2\xbe\x14\x9e\x77\x84\x9f\x50\x2a\x2a\x78\x03\xf3\x7c\xd1\x70\xf3\x9e\xf2\x5c\x23\xdb\x5f\x89\xb8\x91\xc4\x06\xfa\x45\x65\x31\x97\x2d\x57\x17\x0b\x17\xc2\x6c\x7c\x3b\xbd\x99\xc3\xf4\xfa\xe6\xe3\xbc\x0c\x80\x30\xf3\xab\xed\xbd\xf3\x14\xb9\x1e\x8b\x9c\xeb\x26\xbd\xaf\x6f\xdf\x7c\xba\x3b\x5b\x04\x85\x42\xec\xe2\x2c\xe1\x1d\xe4\x79\x85\x44\x9e\x7c\x58\x7d\xb6\x35\x63\xfa\x73\xa6\x49\x9a\x75\xe0\xcf\x2b\xf8\x92\x89\x78\x73\x95\x4b\x62\x6b\xf7\x10\xf7\xa2\xc2\xd5\x55\xe8\x18\x51\x1d\xec\x45\x6d\xd3\x30\xf1\x3e\x67\x9a\x66\x8c\xa2\xec\x20\x5f\xb6\x91\xee\xb2\xc7\xcc\xbe\x5a\xd8\x69\x91\x49\xca\xb5\xef\xf5\x66\xfe\xd2\x83\xd3\xd3\xfe\xa2\x08\x6a\xd5\x7e\xce\x9d\x6e\xbf\xac\xa1\x7c\xc0\xbf\xd3\x3a\x38\x6c\xc0\x6d\x12\xae\xc8\xbe\xca\x80\x53\xe8\x1c\xbb\x21\x1b\xfd\xe3\x8f\x55\x9b\xaf\x11\x52\x24\xfa\x7f\xff\xd6\x08\x5d\x75\xeb\x6a\x04\xc3\xba\x7f\x8b\x8e\x1c\xd6\xfd\x38\xdb\xd0\x0c\x72\xce\x68\x4a\xcd\xb3\x40\xe2\x18\x95\x32\x86\x8e\x55\x74\xcb\x5e\x14\x75\x75\x1b\x7e\xbc\x4a\xe8\x95\x1e\x9d\x43\xc2\x24\x92\x64\xef\x9a\x96\x51\x65\xd4\xcd\x74\x33\x8e\x9b\xf3\x6f\xf2\x65\x3a\x9b\xcf\xbc\xb0\xd5\xfa\x81\xb9\xc4\x59\x27\x28\xaf\x36\xea\xd5\xf1\x95\xed\x5e\x10\x63\x9b\x1d\xd6\x84\x27\x8c\xf2\xfb\x43\x77\xd3\xeb\xf1\xed\xaf\x5f\xcd\xc0\x7d\x6c\x50\x84\x9d\x3a\x31\x17\x3a\x24\xbe\x71\xbd\x66\x3c\x37\xd3\xdb\xc9\xf7\x1d\xbc\x1c\xc2\x49\xb7\x43\x83\x3a\xac\xf1\x1a\xe3\x4d\x2b\x26\xb1\x45\x69\x9c\x42\xec\xde\xa9\x42\xbd\xe8\xcb\xac\xd9\x47\x8d\xa1\x73\x34\xfa\x4e\xe3\x75\xa3\x36\xec\x1d\xb1\xfb\x08\x1d\x51\x04\x9f\x11\xd6\x64\x8b\x40\x80\xe3\xae\xbc\x6f\xe7\x5d\x35\x05\x61\x35\x8e\xdd\xfd\xc7\xdf\xe5\x8a\xbf\xc3\x7c\xcc\xdc\xf3\xda\x1f\x6f\xaf\xdf\xae\x0d\x97\xd3\xd7\x8f\x18\xea\x9b\xe0\x45\x2e\x8f\x52\xf8\x0b\xf8\x47\x3a\xb0\xaf\x30\x5a\xf4\xd2\x95\xab\x83\xe2\x0a\x90\x94\x36\x63\xab\x4f\x15\x30\x22\xef\x6d\xb5\x10\x6e\xa1\x76\x6a\x83\xa2\xdf\xd0\x2c\x52\xe6\x64\x83\x7b\x58\x13\x55\x35\x6a\xae\x30\x01\xaa\xff\xaf\x0a\xec\x0e\xeb\xde\x2d\x15\x4a\xff\x0e\x41\x95\x1d\x21\x3b\x4c\x40\xf0\x18\xed\x7e\x42\x38\xa0\x59\x33\xec\x06\xea\xa2\x80\x1d\xd5\x6b\xea\xae\x71\x4f\xb7\xc8\x4b\x07\xae\x7a\x8b\x4d\xe4\x3f\xe0\x08\x4e\x0e\x9f\xb1\xa0\xb5\xd2\x08\x09\x7e\xff\xe8\x29\xd6\x80\x62\xec\x10\x9e\xb4\xd2\x3f\x9f\xbf\x6b\x81\x7e\x06\xdf\xef\x79\x05\x4f\xe0\xe5\x30\x80\x08\xba\x55\x69\x45\x70\x02\xe7\x41\x10\xb4\x37\xad\x83\x4a\x9d\x7c\x39\x18\x84\x61\xfb\xb1\x0f\xc1\xd3\x42\x13\x66\x12\x0e\xf8\x10\x23\x26\x98\x78\x41\xaf\x39\xd3\xeb\x4d\x6b\xf5\xd2\xd4\xc4\xbb\xb9\x6a\xe6\x69\x73\xad\xeb\x49\x71\x08\x24\x49\x6c\x7a\x1f\x32\x2a\x29\xbf\x2f\x10\xa6\x8c\xe8\x0a\xb8\xd0\x55\x25\xe1\x03\x55\x5a\x95\x89\xfd\x3e\xe3\xc3\x1f\xe0\xa4\xc0\x87\x7d\xeb\x87\x61\x37\x04\xcf\x4a\x0a\x32\x0e\x77\xff\x42\xe8\x3a\xb2\x7e\x4d\x18\xdc\x0b\x91\x78\x83\xbf\x03\x00\x00\xff\xff\x6b\xb7\xef\xd1\x70\x0d\x00\x00")

func cutoffLuaBytes() ([]byte, error) {
	return bindataRead(
		_cutoffLua,
		"cutoff.lua",
	)
}

func cutoffLua() (*asset, error) {
	bytes, err := cutoffLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cutoff.lua", size: 3440, mode: os.FileMode(420), modTime: time.Unix(1616074955, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cutoff.lua": cutoffLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cutoff.lua": &bintree{cutoffLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
