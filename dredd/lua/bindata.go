// Code generated for package lua by go-bindata DO NOT EDIT. (@generated)
// sources:
// cutoff.lua
package lua

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cutoffLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x6b\x6f\xe2\x38\x17\xfe\xce\xaf\x38\x6f\xe6\xc3\x4b\x3a\x09\xa5\xcc\xd0\x59\x55\xcb\x4a\xb3\xc0\x56\xa8\x97\xa9\x0a\x73\xa9\x2a\xb4\x32\xc9\x01\x2c\x1c\x27\xb2\x1d\x28\xb3\xda\xfd\xed\x2b\xdb\xb9\x41\x42\xf7\xa2\xe5\x03\x20\x9f\xe7\x9c\xe3\xf3\x9c\x9b\x7d\xdf\x6f\xf9\xbe\x0f\xd7\xc8\x51\x10\x85\x21\x2c\xf6\x30\x8e\xa2\xfd\x6d\x4a\xda\x6b\xa5\x12\x79\x75\x7e\xbe\xa2\x6a\x9d\x2e\x3a\x41\x1c\x9d\x67\x22\xd7\x28\x0d\x05\xe6\x2a\xc1\x82\x32\x86\x4a\x75\x8c\x60\x44\x14\xce\x68\x84\x57\xd0\xeb\xf6\xba\x7e\xb7\xe7\x77\xfb\xf0\xc3\x55\xff\x03\x90\x4e\x64\x20\xad\x96\xc0\x90\xca\x8e\xc0\x84\xd1\x80\x28\xfc\x35\x88\xa3\x88\xf0\x50\xb6\xdd\x96\xb1\xf1\x59\x51\x46\x15\x45\xd9\x6a\xb1\x38\x20\x0c\x96\x29\x0f\x14\x8d\x39\x48\x46\x03\x6c\xab\x05\xf3\x60\x49\x85\x54\x1e\x30\xa2\xbf\xa5\xc2\xc4\x6d\x01\x00\x58\x05\x83\x0b\x61\x00\xbf\xfd\xde\x32\xc7\xcb\x58\x00\x85\x81\xd5\x82\x58\xc0\x85\x55\xd5\x7f\xdf\x18\x7b\xda\x84\x11\x40\x18\x1b\x15\xfd\xb1\x76\x9e\xdf\x64\xf6\xde\xc2\xc5\x1c\x06\xa0\x16\xec\x99\xce\x0d\x08\x79\x68\x1d\x08\x54\xa9\xc8\x2e\x18\xb6\xcc\xf1\xd1\xdd\x83\x38\x4a\x52\x85\xc3\x54\x08\xe4\xea\x01\x05\x8d\xc3\x61\xcc\x65\x1a\x25\x5a\xde\xde\x51\x1e\xc6\xbb\x29\xfd\x8e\xd5\x48\x36\xb8\x97\x30\xc8\x02\xbf\x19\x3f\x4d\x3d\xe8\x7b\xd0\x87\xb7\xd0\x8c\xdf\x12\x96\xa2\xd6\xb0\x24\x07\x84\xb1\xb6\x73\x77\x3d\x9e\x39\x1e\xa4\x3c\x21\xc1\xa6\xad\x4d\xba\x07\x6c\xa5\x11\x0c\xa0\x5b\x12\xc5\x43\x7c\xf1\xac\x29\xa0\x1c\x68\x42\xa8\x90\x6d\x6b\xda\xad\xf2\x93\xf9\xd4\x9c\xc4\x3c\x8d\x16\x28\x2c\xca\x2d\x10\x74\x09\x5b\xf8\x63\x00\x9c\x32\x50\x6b\xe4\x85\xc0\xd0\x6b\x1c\xeb\xef\xb7\xb0\x2d\x24\x9a\xbc\xea\x6f\x4e\x6d\x1a\x59\x5e\x75\x89\xdc\x8c\x9f\x60\x34\xfe\x65\x72\x3f\x99\x4d\x3e\xdd\x4f\x33\xae\x53\x89\xa2\x4a\x2c\x86\xa3\x38\x80\x81\x46\x4f\x9f\x2f\xe6\x19\x6a\xc1\x48\xb0\xb9\xa5\x52\xdd\xe0\x3e\x17\xf6\x6a\xc2\x2f\x28\x24\x8d\x79\x05\xf3\x6e\x5e\x71\x73\x47\x79\xaa\x90\xed\x47\x71\x50\x49\x62\x05\xfd\xbe\xb0\x98\x8a\x03\x57\xfd\xb9\x0d\x61\x3a\x7c\x9c\x3c\xcc\x60\x72\xff\xf0\x79\x96\x07\x40\x98\xfe\x55\xe6\xde\x69\x84\x5c\x0d\xe3\x94\xab\x2a\xbd\x1f\x1f\xaf\xbf\x3c\x5f\xcc\xdd\x4c\x21\xb0\x71\xe6\xf0\x1a\xb2\x57\x20\x91\x87\x9f\x96\x5f\x4d\xcd\xe8\xfe\x9c\x2a\x12\x25\x35\xf8\xbb\x02\xbe\x60\x71\xb0\x19\xa5\x82\x98\xda\x3d\xc6\xbd\x2f\x70\x65\x15\x5a\x46\x64\x0d\xdb\x2f\x6d\x6a\x26\xee\x52\xa6\x68\xc2\x28\x8a\x1a\xf2\xf2\x10\x69\x2f\x7b\xca\xec\x87\xb9\x99\x16\x89\xa0\x5c\xb5\x9d\xc6\xcc\x5f\x39\xd0\xe9\x34\x17\x85\x5b\xaa\x36\x73\x6e\x75\x9b\x65\x15\xe5\x23\xfe\xad\xd6\xd1\x61\x05\x6e\x92\x30\x22\xfb\x22\x03\x56\xa1\x76\x6c\x87\xac\xff\x8f\x3f\x46\x6d\xb6\x46\x88\x90\xa8\xff\xfd\x5b\x23\x74\x59\xaf\xab\x01\x74\xcb\xfe\xcd\x3a\xb2\x5b\xf6\xe3\x74\x43\x13\x48\x39\xa3\x11\xd5\x6b\x81\x04\x01\x4a\xa9\x0d\x9d\xaa\xe8\x03\x7b\xbe\x5f\xd7\xad\xf8\x71\x0a\xa1\x93\x7b\xb4\x0e\x09\x13\x48\xc2\xbd\x6d\x5a\x46\xa5\x56\xd7\xd3\x4d\x3b\xae\xce\xbf\xf1\xb7\xc9\x74\x36\x75\xbc\x83\xd6\x77\xf5\x25\x2e\x6a\x41\x39\xa5\x51\xa7\x8c\x2f\x6f\xf7\x8c\x18\xd3\xec\xb0\x26\x3c\x64\x94\xaf\x8e\xdd\x4d\xee\x87\x8f\x3f\x3f\xe9\x81\xfb\xda\xa0\xf0\x6a\x75\xa2\x2f\x74\x4c\x7c\xe5\x7a\xd5\x78\x1e\x26\x8f\xe3\xbf\x76\x70\xd9\x85\xb3\x7a\x87\xba\x65\x58\xc3\x35\x06\x9b\x83\x98\xe2\x2d\x0a\xed\x14\x02\xbb\xa7\x32\xf5\xac\x2f\x93\x6a\x1f\x55\x86\xce\xc9\xe8\x6b\x8d\x57\x8f\x5a\xb3\x77\xc2\xee\x2b\x74\xf8\x3e\x7c\x45\x58\x93\x2d\x02\x01\x8e\xbb\xfc\xbe\xb5\xbd\xaa\x0b\xc2\x68\x9c\xba\xfb\xdf\xdf\xcb\x05\x7f\xc7\xf9\x98\xda\xf5\xda\x1c\x6f\xa3\xdf\xba\x0d\x9b\xd3\x8f\xaf\x18\x6a\x9a\xe0\x59\x2e\x4f\x52\xf8\x13\xb4\x4f\x74\x60\x53\x61\x1c\xd0\x4b\x97\xb6\x0e\xb2\x2b\x40\x98\xdb\x0c\x8c\x3e\x95\xc0\x88\x58\x99\x6a\x21\xdc\x40\xcd\xd4\x06\x49\xbf\xa3\x7e\x48\xe9\x93\x0d\xee\x61\x4d\x64\xd1\xa8\xa9\xc4\x10\xa8\xfa\xbf\xcc\xb0\x3b\x2c\x7b\x37\x57\xc8\xfd\x5b\x04\x95\x66\x84\xec\x30\x84\x98\x07\x68\xde\x27\x84\x03\xea\x67\x86\x79\x81\xda\x28\x60\x47\xd5\x9a\xda\x6b\xac\xe8\x16\x79\xee\xc0\x56\x6f\xf6\x12\xf9\x0f\x38\x82\xb3\xe3\x35\xe6\xea\x60\xab\x99\x9c\xcd\x6e\xf5\xa8\xc9\xd6\xbe\x0b\x3f\x42\xbb\xdd\xb0\xd0\xce\xe0\xb2\xeb\x82\x0f\xf5\x02\x33\x22\x38\x83\x9e\xeb\x1e\xbe\x99\x8e\x6a\x6e\xfc\xed\x68\xa4\x79\x87\x6b\xdb\x03\x47\xc5\x8a\x30\x9d\x3a\xc0\x97\x00\x31\xc4\xd0\x71\x1b\xcd\xe9\xae\xad\x5a\x2b\x9f\x3f\x55\xbc\x9d\x90\x7a\x32\x56\x1f\x68\x0d\xc9\xf2\x80\x84\xa1\x49\xd4\x4b\x42\x05\xe5\xab\x0c\xa1\x0b\x82\x2e\x81\xc7\xaa\xa8\x09\x7c\xa1\x52\xc9\x3c\x45\xcd\x63\xbb\xe0\xf2\x70\x6f\x9c\xe4\x24\xc3\x7b\x0d\x0f\x09\x0f\x1c\x73\x98\xf1\x70\xfc\x80\xcf\x84\xb6\xad\xca\x95\xc0\x60\x15\xc7\xa1\xd3\xfa\x33\x00\x00\xff\xff\x9d\xbe\xe8\x98\x35\x0d\x00\x00")

func cutoffLuaBytes() ([]byte, error) {
	return bindataRead(
		_cutoffLua,
		"cutoff.lua",
	)
}

func cutoffLua() (*asset, error) {
	bytes, err := cutoffLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cutoff.lua", size: 3381, mode: os.FileMode(420), modTime: time.Unix(1616073696, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cutoff.lua": cutoffLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cutoff.lua": &bintree{cutoffLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
