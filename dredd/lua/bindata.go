// Code generated by go-bindata.
// sources:
// neo_cutoff.lua
// rate_limit.lua
// DO NOT EDIT!

package lua

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _neo_cutoffLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x51\x6f\xe2\x46\x10\x7e\xf7\xaf\x98\xfa\x5e\xa0\x87\x89\x21\xb9\xf6\x14\x89\x4a\x2d\xb8\x91\x95\xbb\x5c\x84\xb9\x6b\xa2\x08\x55\x8b\x3d\x84\x15\xeb\x5d\x6b\xbd\x4e\x83\xaa\xf6\xb7\x57\xbb\x6b\xf0\x06\xe3\xb4\xbd\x87\xe3\x01\x22\xcf\x7c\xdf\xce\xf7\xed\xcc\x38\x41\x10\x78\x41\x10\xc0\x15\x72\x94\x44\x61\x06\xab\x1d\x44\x79\xbe\xfb\x50\x91\xde\x46\xa9\xa2\xbc\x3c\x3b\x7b\xa4\x6a\x53\xad\x86\xa9\xc8\xcf\xea\x50\xdf\x80\xa6\x12\xf7\x90\x74\x45\x19\x43\xa5\x86\x26\x30\x23\x0a\x17\x34\xc7\x4b\x18\x87\xe3\x30\x08\xc7\x41\xf8\x0e\xde\x5f\xbe\xfb\x11\xc8\x30\x37\x29\x9e\x27\x31\xa3\xe5\x50\x62\xc1\x68\x4a\x14\xfe\x9e\x8a\x3c\x27\x3c\x2b\x7b\x7d\xcf\x70\x7c\x56\x94\x51\x45\xb1\xf4\x3c\x26\x52\xc2\x60\x5d\xf1\x54\x51\xc1\xa1\x64\x34\xc5\x9e\x5a\xb1\x01\xac\xa9\x2c\xd5\x00\x18\xd1\xdf\xa5\xc2\xa2\xef\x01\x00\x58\x80\xc9\xcb\x60\x02\x7f\xfe\xe5\x99\xc7\x6b\x21\x81\xc2\xc4\xa2\x40\x48\x18\x59\xa8\xfe\xf3\x8d\xe1\xd3\x14\x26\x00\x99\x30\x10\xfd\xb1\x3c\x0f\x6f\x6a\xbe\xb7\x30\x5a\xc2\x04\xd4\x8a\x3d\xd0\xa5\x49\x42\x9e\xd9\x03\x24\xaa\x4a\xd6\x05\x66\x9e\x79\x7c\x54\x7b\x2a\xf2\xa2\x52\x38\xad\xa4\x44\xae\x6e\x51\x52\x91\x4d\x05\x2f\xab\xbc\xd0\x71\x2d\xbe\x11\xb0\xc5\x5d\x09\x93\x5a\xef\x75\x74\x9f\x0c\xe0\x62\x00\xe7\x17\xae\xc8\x27\xc2\x2a\xd4\x59\xd6\xcf\x94\x30\xd6\xf3\x3f\x5e\x45\x0b\x7f\x00\x15\x2f\x48\xba\xed\x69\x9a\xfe\x0b\x63\xaa\x1c\x26\x10\x36\x9e\xf0\x0c\x9f\x07\x96\x0a\x28\x07\x5a\x10\x2a\xcb\x9e\xa5\xee\xbb\x56\xd4\x67\x6a\xf9\x82\x57\xf9\x0a\xa5\xcd\xea\x1f\x32\xe8\x1a\x9e\xe0\xef\x09\x70\xca\x40\x6d\x90\x1f\x02\xc6\x49\x73\xb0\xfe\x7e\x0b\x4f\x87\x88\xf6\xc9\xfd\xdd\xbb\x58\xe5\xd6\x42\xdd\x0d\xd7\xd1\x3d\xcc\xa2\x5f\xe3\x9b\x78\x11\x7f\xba\x49\x6a\x5b\xab\x12\xa5\xeb\x21\x66\x33\x91\xc2\x44\x67\x27\x0f\xa3\x65\x9d\xb5\x62\x24\xdd\x7e\xa0\xa5\xba\xc6\xdd\x3e\x38\x6e\x05\xbf\xa0\x2c\xa9\xe0\x4e\xce\xf9\xd2\x39\x66\x46\x28\xdb\xcd\x44\xea\x5c\x96\x93\x7a\xb1\xb4\x65\x26\xd3\x79\x7c\xbb\x80\xf8\xe6\xf6\xf3\x62\x5f\x24\x61\xfa\x57\x99\xda\xaa\x1c\xb9\x9a\x8a\x8a\x2b\xd7\xc2\x9f\xe7\x57\x5f\x1e\x46\xcb\x7e\x0d\x48\xad\x96\x7d\x7a\x2b\x73\x7c\xc8\x44\x9e\x7d\x5a\xcf\xc8\x4e\xcf\x5a\xa2\x48\x5e\xb4\x72\xcf\x97\x66\x9c\x0a\x49\xb9\xea\xf9\x27\xfd\xba\xf4\x61\x38\x3c\x6d\x65\xbf\x81\x9e\x56\x61\xb1\xa7\x63\x0e\xf8\x48\x91\x45\x1d\x3d\x74\xd2\x5b\xb2\x2c\xa0\xf5\xd8\x6e\xa1\xe0\x7f\x7f\x0c\x6c\xb1\x41\xc8\x91\xa8\xef\xbe\x96\x84\xae\xdb\x37\x35\x81\xb0\xe9\xfa\xba\x8f\xc3\xa6\x8b\x4d\x13\xd5\x28\xd3\x42\xb0\x21\x3c\x63\x94\x3f\x6a\x36\x77\x82\xe3\x9b\xe9\xfc\x97\x7b\x3d\xc3\x9d\xbd\x37\x68\x39\xa8\xcf\x3f\x2e\xc9\xa9\xa6\x61\x8f\xee\x6e\xe3\x79\xf4\x2f\xec\xef\x7f\xb8\x08\x43\xf8\x1e\xce\xc3\x7e\xa3\x60\x8e\x39\xa1\x9c\xf2\x47\xc8\xf6\x27\x1c\x24\xd8\x9e\x2c\xdc\x26\x72\x7a\xb8\x53\x5d\xab\xeb\xda\xc2\xb4\x3b\x1d\xbc\xaf\x28\x0e\x02\xf8\x0d\x61\x43\x9e\x10\x08\x70\xfc\xe3\xb5\x39\xde\xe2\xce\x59\x90\x69\xc7\x7a\x86\xc9\x7f\x58\xe0\xc7\x66\x27\x76\x17\x77\x28\xed\xe0\xb1\x34\x5d\x5e\x76\xa1\x1c\x09\xc7\x96\x2f\xe2\x8f\x91\xef\xbe\x04\xf0\xb9\xa0\x12\x63\xad\xa9\xbd\x46\x82\x66\x8d\x28\xb3\x99\x5e\xed\xa0\x13\xba\xf6\xec\x4e\xeb\x24\x5b\x5a\x40\x41\x76\xba\x79\xd2\xaa\x54\x22\x47\xa9\x2f\xb6\x6b\x3f\xbe\x98\xa5\x20\x68\x41\x9d\x11\xf3\x2b\xce\x68\x4e\x15\x66\xbe\x3d\xef\x68\x9a\xa2\xbb\x38\x59\x24\xfe\xe0\xc5\xab\xc0\x8c\xcb\xa8\x35\xae\x7a\xd3\x81\x44\x92\xed\x60\xc5\x1a\xba\xd3\x57\xf1\x53\x57\xf5\x07\xd6\x6f\x72\x1b\x49\xb4\x88\xee\x8e\xe4\x35\x77\x30\x00\x5f\x09\x45\x98\x1e\x59\xc0\xe7\x14\x31\xc3\xcc\xaf\xff\xd3\x38\xb1\x77\x5c\xa2\xe6\xad\x78\x6c\xd7\x57\xed\x94\xa6\x2d\x4e\xbc\xf0\xfd\x83\xdf\xee\x55\x3c\x0a\x91\xf9\xde\x3f\x01\x00\x00\xff\xff\xa0\xab\xfa\x83\xa8\x0a\x00\x00")

func neo_cutoffLuaBytes() ([]byte, error) {
	return bindataRead(
		_neo_cutoffLua,
		"neo_cutoff.lua",
	)
}

func neo_cutoffLua() (*asset, error) {
	bytes, err := neo_cutoffLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "neo_cutoff.lua", size: 2728, mode: os.FileMode(420), modTime: time.Unix(1581105065, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rate_limitLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x6d\x6f\xdb\xb6\x13\x7f\xef\x4f\x71\x7f\xf5\x8d\xdd\xca\x81\xf2\xd0\xe2\x8f\x75\x2a\xe0\xd8\x4a\x2b\x24\x75\x04\x4b\x29\x9a\x06\x86\xc0\x88\x74\x4c\x58\x26\x35\x91\x5a\x63\x0c\xfb\xee\x03\x49\x49\x96\x64\xb9\xcb\x36\x0c\x58\x81\xa2\x2e\x79\x8f\xbf\xbb\xfb\xf1\x94\x13\x4c\xc5\x49\x4e\xb2\x94\x26\x48\x92\x38\xe1\xdb\x2d\x62\x58\x0c\x47\x83\xc1\x78\x0c\x94\x25\x39\xd9\x12\x26\x05\x88\x84\xe7\x04\x56\x3c\x87\x0d\xd9\xc1\xec\x76\x1a\x87\xd3\xdb\x85\x17\x5f\x7b\xf7\x83\x94\x27\x28\x85\x55\xc1\x12\x49\x39\xdb\x6b\xc5\x98\x27\xb1\x51\x1c\x6e\xc8\xce\x06\x94\xd1\x6b\xf5\x2f\xe6\xc9\x94\x17\x4c\x8e\x06\x00\x00\x26\x88\x04\xa5\xe9\xd0\xfa\xe6\xcf\xa7\x8b\xcb\x7b\xcb\x86\x4d\x53\xb0\x52\x85\x93\x13\xb0\x94\x59\x6b\x04\xcd\xf8\xca\xf0\xf8\x0a\x1e\x50\x46\xe3\x0d\xd9\x2d\x95\x14\x6c\xc9\xf6\x91\xe4\xda\x8b\x09\x52\x72\x89\xd2\x19\x4f\xc0\x7d\x99\x5b\x4b\x2b\xfc\xd0\x63\x2d\x51\x79\x6b\xba\x93\x69\xc7\x53\x14\xdd\x18\x2f\x26\x77\xba\x32\x32\x2e\x8c\x4f\x41\xae\x09\xd3\xa7\x5d\x54\xbc\xaf\x81\xbf\xf0\xaa\xe8\xfe\xff\xee\xc2\x71\xe0\x35\x9c\x3b\xc6\x06\x61\x78\xa0\xfe\x76\x2a\xe6\x07\x90\xa8\x24\x8e\x97\x87\x66\xb1\x96\x18\xd2\x6c\x82\x71\x4e\x84\xd0\x59\xeb\x12\xd1\xec\xb0\x38\xc1\xd5\x64\x36\xb3\xd4\x5d\xaf\xf8\x0b\xf2\x3e\xd0\xfc\x5b\x28\xf4\xf8\xd7\x98\x74\xe0\xe8\xe4\xfd\x98\xa2\x64\x13\xa7\x54\xc8\xb8\x10\x24\x8f\x29\x1e\xea\xa3\x1b\x2a\x8c\x0d\x21\x91\xf9\x81\x52\xa5\x2a\xc9\x8c\x27\x85\x02\xaa\xd1\xab\x74\xd5\x7f\x0b\x3f\xbb\xe0\x74\x43\x97\x45\xce\xea\x90\xf4\x8f\xf1\x18\xc4\x86\x66\x19\x65\x4f\x26\x1e\x50\xf1\x40\x96\xf3\x84\x08\x01\x9c\x01\x62\x80\xd2\x9c\x20\xbc\x6b\x08\x10\xac\x2a\xff\x02\x7c\x9b\x09\xb5\xa0\xfd\xd0\x8d\x6e\x3c\xce\x72\xca\xe4\xd0\xea\xf3\xf6\x93\xa5\x06\x4d\xca\x74\xf4\x67\xd9\x2c\xf4\xb1\x50\xa0\x28\xfb\x40\xd2\xb2\xfb\x28\xd3\xff\x17\x3c\x57\xd1\x0b\x22\x01\x49\x4d\x1d\xdf\xa9\x5c\x03\x2a\xc7\xe7\x91\xc8\xef\x84\x30\xd8\xa2\x67\x40\x0c\xc3\x96\x32\x18\x52\x96\xa4\x05\x56\x10\xd5\xd6\xb4\x92\x51\x21\xbf\x14\x7a\x8e\xb5\x0e\xcf\x95\xca\xe8\xa4\x01\x4d\x8e\xd8\x13\x69\x83\x53\x27\xa1\xfe\x58\xdf\x16\xde\x97\xc5\x64\xfe\xd1\xbb\xbc\xd7\x14\x66\xed\x2b\xdf\x16\x7c\x43\xd9\xca\x3a\xd2\x0d\xb6\x4a\x3e\xe5\x7c\xa3\xc2\x54\xac\x88\xd8\xae\x9c\x7f\x13\xec\xaf\x28\x2d\x08\xac\xe9\xd3\x9a\xe4\x1a\xf9\xda\x0e\x56\xf4\x52\x8e\x66\xcb\xdf\x8d\xff\xd9\x8f\x2c\x1b\x1c\x1b\x4e\xf5\x4d\x39\x52\xaa\x84\xe8\x31\x25\x27\x4f\x44\xb2\xa1\xce\x6f\xd4\x57\x50\xdd\x9c\x55\x10\x2b\x5e\x30\x5c\x81\xfd\xd7\x82\x39\x86\x9c\x0e\x32\xf4\xa2\x4e\x9f\xd9\x87\x42\x9a\x12\xb5\x65\xf2\x9c\x10\x82\x09\xb6\x6c\xd3\x2d\x48\x70\xa6\xf1\x7a\x24\xed\x19\x20\xf8\xd0\x8c\xf7\xd5\xaa\xd8\x6e\x3c\x86\xb3\x8b\xb5\x6a\xc9\x5a\xec\x90\xfc\x2e\xf7\x13\x85\xd4\x83\x61\xfa\x4d\xa5\xab\x5a\x91\x0a\xd3\x35\x6c\x07\x34\x03\x64\x18\x04\x90\x10\x3c\xa1\x1a\x09\x05\xd6\xc9\x0f\x58\x83\x66\x7d\x44\x59\x21\xe9\x07\xad\x97\xea\xb2\x45\x2d\xe6\xec\x80\x42\x4a\x9d\xff\x08\x79\x1c\x06\xfe\x52\x0a\x29\xa1\xfe\x07\x54\x62\x22\x6b\xc3\xdb\x09\x32\xb8\x9a\xde\xde\xcd\xa3\xde\x57\x44\x61\xf3\x91\x48\x5d\x67\x56\xe8\x01\xe0\xab\x66\x99\x0b\x41\xb0\x99\x53\x10\x19\x49\xe8\x8a\x26\x1a\x95\x2a\xc1\x8e\xe7\x0f\x07\x25\x3a\xf6\x2a\x1d\x9b\x90\x9e\x2e\x38\x36\x27\x34\xab\xc7\xa4\x5a\xb0\xfe\xfd\x71\xe9\xb4\x79\x91\x61\xb5\xff\x9d\x3b\x38\x56\x64\x28\x60\x88\x79\x12\x2a\xc2\x0d\x72\xb2\xa2\xcf\x36\x6c\x39\x93\xeb\xd0\x10\xe5\xa8\x51\x33\x8c\x76\xd7\x64\x27\xc0\x85\xdf\x7e\x6f\x1c\x27\x45\x2e\x78\x0e\x2e\x38\xe5\x1a\x91\x11\xb4\xa7\x98\xb2\x11\x3b\x15\x0e\xa7\x93\xb9\x65\x97\xaa\x36\x58\x9f\x27\xd1\xf4\x93\xa5\xd7\xb1\x46\x28\x7a\x07\x7c\x6d\xd9\x60\x55\xfd\x70\xe6\x38\x8e\x33\x7a\xdf\xb1\xae\x87\xc3\x05\xf9\x70\xb6\xdc\x5f\x29\x2c\x29\xb8\x70\x6a\xc3\x2b\x2d\x80\x79\x0b\xc8\x32\x9b\x87\x57\x55\x5a\x6f\xe0\x74\x09\xae\x36\xf6\x40\x97\xb5\x2c\x61\x18\xf6\x56\xeb\x64\xe5\xc3\x69\xe9\xac\x60\x92\xee\x51\x70\xc1\x72\xac\xf7\x83\x03\xd8\xaa\x3e\x6f\xf0\x7b\xe9\xb8\x09\x71\x4e\x44\x77\x5f\xbd\x9b\xfb\xb7\xf3\x30\x32\xcf\x57\xb3\x34\x76\xd3\xb2\x0d\x05\xcb\x50\xb2\xa9\x8d\x8e\x6a\xae\x0c\xa7\x0b\x3f\x88\xc0\x9f\x07\x77\x51\x58\x76\x43\xb9\x63\xbb\x30\x59\x7c\xfc\xf2\x70\xba\x1c\x54\x53\x59\x1d\x9d\x55\x47\xfd\x3b\x90\x0b\x92\x9b\xe9\x1b\x6a\xf1\xf3\xe5\xa8\x23\x5f\x4d\x53\x57\xf2\xa2\x96\xac\x56\xef\x03\x91\xb7\x4b\xf3\x4d\x72\xed\xdd\xc3\xcc\xbb\xf2\xe7\x7e\xa4\x20\x28\xd5\xf6\x1f\x24\xc1\xc2\xbb\xf2\xbf\x82\xab\x04\xc3\x7d\x12\xad\x2f\x96\xea\xb6\xce\xc7\x0f\xe2\xc9\x6c\xb6\xf0\xc2\x30\xd6\x4d\xd5\x14\x3a\xaf\x84\xee\x42\x6f\x11\xfb\xb3\xf8\xf2\x66\x32\xbd\x8e\x6f\xfc\xb0\x25\x76\x51\x89\x4d\x02\x5f\x9d\x1f\x11\x7b\x5b\x89\x7d\xbe\x9d\x47\x9f\xe2\x30\x9a\xb4\xae\xdf\x2d\x55\x92\x81\xa1\xf4\x41\xcf\x97\xd4\xb0\x95\x48\xdf\x27\x55\xcf\x7e\xdf\x97\x5e\xb9\xb3\x77\x07\x7f\xd8\x45\xd2\xee\x44\x3a\x1a\xf4\x2c\xd2\xfd\xd0\x74\x55\x8f\x6e\xd6\xed\x47\xb6\x3f\xda\x83\x77\xb6\x1f\xe7\xfd\x5b\x3b\x30\xef\x0c\x58\x6a\x37\x7d\xe2\x1c\xff\xcf\x52\xbc\x58\x9e\x0a\xbe\x25\x72\xad\x48\x75\xab\xb6\x4a\x41\x9f\x98\x7a\x14\x10\x93\x7f\x04\x00\x00\xff\xff\x95\x70\xfd\x38\x14\x0f\x00\x00")

func rate_limitLuaBytes() ([]byte, error) {
	return bindataRead(
		_rate_limitLua,
		"legacy_rate_limit.lua",
	)
}

func rate_limitLua() (*asset, error) {
	bytes, err := rate_limitLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "legacy_rate_limit.lua", size: 3860, mode: os.FileMode(420), modTime: time.Unix(1580995120, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"neo_cutoff.lua": neo_cutoffLua,
	"legacy_rate_limit.lua": rate_limitLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"neo_cutoff.lua": &bintree{neo_cutoffLua, map[string]*bintree{}},
	"legacy_rate_limit.lua": &bintree{rate_limitLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
