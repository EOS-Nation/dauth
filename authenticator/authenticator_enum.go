// Code generated by go-enum
// DO NOT EDIT!

package authenticator

import (
	"fmt"
	"strings"
)

const (
	// AuthTokenRequired is a AuthTokenRequirement of type AuthTokenRequired.
	AuthTokenRequired AuthTokenRequirement = iota
	// AuthTokenOptional is a AuthTokenRequirement of type AuthTokenOptional.
	AuthTokenOptional
	// AuthTokenDisabled is a AuthTokenRequirement of type AuthTokenDisabled.
	AuthTokenDisabled
)

const _AuthTokenRequirementName = "AuthTokenRequiredAuthTokenOptionalAuthTokenDisabled"

var _AuthTokenRequirementNames = []string{
	_AuthTokenRequirementName[0:17],
	_AuthTokenRequirementName[17:34],
	_AuthTokenRequirementName[34:51],
}

// AuthTokenRequirementNames returns a list of possible string values of AuthTokenRequirement.
func AuthTokenRequirementNames() []string {
	tmp := make([]string, len(_AuthTokenRequirementNames))
	copy(tmp, _AuthTokenRequirementNames)
	return tmp
}

var _AuthTokenRequirementMap = map[AuthTokenRequirement]string{
	0: _AuthTokenRequirementName[0:17],
	1: _AuthTokenRequirementName[17:34],
	2: _AuthTokenRequirementName[34:51],
}

// String implements the Stringer interface.
func (x AuthTokenRequirement) String() string {
	if str, ok := _AuthTokenRequirementMap[x]; ok {
		return str
	}
	return fmt.Sprintf("AuthTokenRequirement(%d)", x)
}

var _AuthTokenRequirementValue = map[string]AuthTokenRequirement{
	_AuthTokenRequirementName[0:17]:  0,
	_AuthTokenRequirementName[17:34]: 1,
	_AuthTokenRequirementName[34:51]: 2,
}

// ParseAuthTokenRequirement attempts to convert a string to a AuthTokenRequirement
func ParseAuthTokenRequirement(name string) (AuthTokenRequirement, error) {
	if x, ok := _AuthTokenRequirementValue[name]; ok {
		return x, nil
	}
	return AuthTokenRequirement(0), fmt.Errorf("%s is not a valid AuthTokenRequirement, try [%s]", name, strings.Join(_AuthTokenRequirementNames, ", "))
}

// MarshalText implements the text marshaller method
func (x AuthTokenRequirement) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *AuthTokenRequirement) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseAuthTokenRequirement(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
